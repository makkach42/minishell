X $a split			
X minishell$> export f""=$a b=$a second mustnt be split   
X minishell$> export 1saa=$a f=$a b=$a split if str[0] 0-9
X $ara export 1=$a f=$a b=$a kolchi split
X $t u=$a split


X /*
X ----REDIRECTION (Command: ) (Ambiguous: 1) (Var: 0) (Fd_list: 0x7fee5a9041c0) (fd_list_redirs: "") [Redirections: > $z""]
X *******************1
X minishell$> > a$b
X >
X REDIRECTION
X 
X a$b
X WORD
X 
X 
X 
X ----REDIRECTION (Command: ) (Ambiguous: 0) (Var: 0) (Fd_list: 0x7fee5a804140) (fd_list_redirs: a    abc   ) (fd_list_redirs split: a) [Redirections: > a$b]
X *******************0
X 
X 
X //////ambiguous set after expantion
X */
X 
X 
X minishell$> > "$a"
X >
X REDIRECTION
X 
X "$a"
X WORD
X 
X 
X 
X ambiguous redirect
X ----REDIRECTION (Command: ) (Ambiguous: 1) (Var: 0) (Fd_list: 0x7fee5a804190) (fd_list_redirs: b  c) (fd_list_redirs split: b) [Redirections: > "$a"]
X *******************1
X 
X not ambiguous

X export b=""
X ls > a$b

Xminishell$> ls $a
Xls
XWORD
X
X$a
XVARIABLE
X
X
X
X++++++++++++ls
X++++++++++++b  c

Xminishell$> export "h=$a"
Xexport
XCOMMAND
X
X"h=$a"
XWORD
X
X
X
X++++++++++++export
X++++++++++++h=b  c"
X----COMMAND (Command: export "h=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h=b  c") (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0)
X*******************0
X
Xminishell$> "export h=$a"
X"export h=$a"
XWORD
X
X
X
X++++++++++++export h=b
X++++++++++++c"
X----WORD (Command: "export h=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export h=b) (Command_arr: c") (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0)
X*******************0

Xminishell$> export 'h=$a'
Xexport
XCOMMAND
X
X'h=$a'
XWORD
X
X
X
X++++++++++++export
X++++++++++++h=b  c'
X----COMMAND (Command: export 'h=$a' ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h=b  c') (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0)
X*******************0
Xminishell$> export 'h=$a'

X minishell$> > $a
X >
X REDIRECTION
X 
X $a
X VARIABLE
X 
X 
X 
X ----REDIRECTION (Command: ) (Ambiguous: 0) (Var: 0) (Fd_list: 0x7fc59e204200) (fd_list_redirs: b  c) (fd_list_redirs split: b) [Redirections: > $a]
X *******************0
X  ambiguous

X ///'"$a"'

X > '"$a"' a="l k j"

X > a$b ambiguous b="  abc  "

X > $c c=

///////////////////////
X  ➜  minishell git:(parser) ✗ export h="ayoub'aaa" hh='ayoub"sss'
X ➜  minishell git:(parser) ✗ ./minishell 
X minishell$>  j=$a ""n=$a "f=$a"
X j=$a
X WORD
X 
X ""n=$a
X WORD
X 
X "f=$a"
X WORD
X 
X 
X 
X ++++++++++++j=b  c
X ++++++++++++n=b
X ++++++++++++c
X ++++++++++++f=b  c
X ----WORD (Command: j=$a ""n=$a "f=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: j=b  c) (Command_arr: n=b) (Command_arr: c) (Command_arr: f=b  c) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0)
X *******************0
X minishell$>  j=$a """n=$a" "f=$a"
X j=$a
X WORD
X 
X """n=$a"
X WORD
X 
X "f=$a"
X WORD
X 
X [1]    21294 segmentation fault  ./minishell
X ////////////////////////////
X ////////////////////////////
X minishell$> export   j=$a ""'n=$a' "f=$a"
X export
X COMMAND
X 
X j=$a
X WORD
X 
X ""'n=$a'
X WORD
X 
X "f=$a"
X WORD
X 
X 
X 
X ++++++++++++export
X ++++++++++++j=b  c
X ++++++++++++n=b
X ++++++++++++c'
X ++++++++++++f=b  c
X ----COMMAND (Command: export j=$a ""'n=$a' "f=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: j=b  c) (Command_arr: n=b) (Command_arr: c') (Command_arr: f=b  c) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0) (Split idx: 4) (Split flg: 0)
X *******************0
X minishell$> export   j=$a ""'n=$a' "f=$a"
/////////////////////////////////// dont expand 'n=$a'
////////////
bash-3.2$ echo $
$
bash-3.2$ echo $"HOME"
HOME
bash-3.2$ echo $"HOME$"
HOME$
bash-3.2$ echo $"$'HOME$"
$'HOME$
bash-3.2$ echo $"$'HOME"
$'HOME
///////////////

minishell$> > a$b
b=
echo "'$f'" expand
echo '"'$g'"' remve quotes
echo "'"$a"'" expand 
echo $b'"as"' remove quotes
"$l "-la dont split l=ls the same here ls'     '-la or ls"     "-la or ls"   a  "-la
 <<"'$b'" '$b' should stay
///////////////////////////////////////////////////////////////////////////////
minishell$> export h=$a ""n=$a
export
COMMAND

h=$a
WORD

""n=$a
WORD

----COMMAND (Command: export h=$a ""n=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h) (Command_arr: =) (Command_arr: \$a) (Command_arr: n) (Command_arr: =) (Command_arr: \$a) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0) (Split idx: 4) (Split flg: 0) (Split idx: 5) (Split flg: 0) (Split idx: 6) (Split flg: 1)


++++++++++++export
++++++++++++h=b  c
++++++++++++n=b
++++++++++++c
----COMMAND (Command: export h=$a ""n=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h=b  c) (Command_arr: n=b) (Command_arr: c) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0)
*******************0
minishell$> export h=$a $n=$a
export
COMMAND

h=$a
WORD

$n=$a
VARIABLE

----COMMAND (Command: export h=$a $n=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h) (Command_arr: =) (Command_arr: \$a) (Command_arr: \$n) (Command_arr: =) (Command_arr: \$a) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0) (Split idx: 4) (Split flg: 1) (Split idx: 5) (Split flg: 0) (Split idx: 6) (Split flg: 1)
=================================================================
==3851==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000184d1 at pc 0x000108392781 bp 0x7ffee7892250 sp 0x7ffee7892248
READ of size 1 at 0x6020000184d1 thread T0
    #0 0x108392780 in variable_expantion+0x4d0 (minishell:x86_64+0x100025780)
    #1 0x108384660 in main+0x510 (minishell:x86_64+0x100017660)
    #2 0x7fff67ddacc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)

0x6020000184d1 is located 0 bytes to the right of 1-byte region [0x6020000184d0,0x6020000184d1)
allocated by thread T0 here:
    #0 0x10846817d in wrap_malloc+0x9d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4917d)
    #1 0x108386316 in cases+0xb6 (minishell:x86_64+0x100019316)
    #2 0x108385eef in ft_strjoin+0x1f (minishell:x86_64+0x100018eef)
    #3 0x108392181 in process_array_variable+0x631 (minishell:x86_64+0x100025181)
    #4 0x108392e9d in variable_expantion+0xbed (minishell:x86_64+0x100025e9d)
    #5 0x108384660 in main+0x510 (minishell:x86_64+0x100017660)
    #6 0x7fff67ddacc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)

SUMMARY: AddressSanitizer: heap-buffer-overflow (minishell:x86_64+0x100025780) in variable_expantion+0x4d0
Shadow bytes around the buggy address:
  0x1c0400003040: fa fa fd fa fa fa fd fa fa fa 03 fa fa fa 00 fa
  0x1c0400003050: fa fa 00 fa fa fa 00 fa fa fa 00 fa fa fa 00 fa
  0x1c0400003060: fa fa 00 fa fa fa 00 fa fa fa 07 fa fa fa 02 fa
  0x1c0400003070: fa fa 02 fa fa fa 02 fa fa fa fd fa fa fa fd fa
  0x1c0400003080: fa fa fd fa fa fa fd fa fa fa 05 fa fa fa fd fa
=>0x1c0400003090: fa fa fd fa fa fa fd fa fa fa[01]fa fa fa fa fa
  0x1c04000030a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c04000030b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c04000030c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c04000030d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c04000030e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==3851==ABORTING
[1]    3851 abort      ./minishell
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
minishell$> export j=$a $n=$a ''"f=$a"
export
COMMAND

j=$a
WORD

$n=$a
VARIABLE

''"f=$a"
WORD

----COMMAND (Command: export j=$a $n=$a ''"f=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: j) (Command_arr: =) (Command_arr: \$a) (Command_arr: \$n) (Command_arr: =) (Command_arr: \$a) (Command_arr: f=$a) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0) (Split idx: 4) (Split flg: 1) (Split idx: 5) (Split flg: 0) (Split idx: 6) (Split flg: 1) (Split idx: 7) (Split flg: 0)
=================================================================
==6220==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000010b51 at pc 0x000102aaf781 bp 0x7ffeed175250 sp 0x7ffeed175248
READ of size 1 at 0x602000010b51 thread T0
    #0 0x102aaf780 in variable_expantion+0x4d0 (minishell:x86_64+0x100025780)
    #1 0x102aa1660 in main+0x510 (minishell:x86_64+0x100017660)
    #2 0x7fff67ddacc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)

0x602000010b51 is located 0 bytes to the right of 1-byte region [0x602000010b50,0x602000010b51)
allocated by thread T0 here:
    #0 0x1030ac17d in wrap_malloc+0x9d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4917d)
    #1 0x102aa3316 in cases+0xb6 (minishell:x86_64+0x100019316)
    #2 0x102aa2eef in ft_strjoin+0x1f (minishell:x86_64+0x100018eef)
    #3 0x102aaf181 in process_array_variable+0x631 (minishell:x86_64+0x100025181)
    #4 0x102aafe9d in variable_expantion+0xbed (minishell:x86_64+0x100025e9d)
    #5 0x102aa1660 in main+0x510 (minishell:x86_64+0x100017660)
    #6 0x7fff67ddacc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)

SUMMARY: AddressSanitizer: heap-buffer-overflow (minishell:x86_64+0x100025780) in variable_expantion+0x4d0
Shadow bytes around the buggy address:
  0x1c0400002110: fa fa fd fd fa fa 00 fa fa fa 00 fa fa fa 00 fa
  0x1c0400002120: fa fa 00 fa fa fa 00 fa fa fa 00 fa fa fa 00 fa
  0x1c0400002130: fa fa 00 fa fa fa 07 fa fa fa 02 fa fa fa 02 fa
  0x1c0400002140: fa fa 02 fa fa fa 05 fa fa fa fd fa fa fa fd fa
  0x1c0400002150: fa fa fd fa fa fa fd fa fa fa 05 fa fa fa fd fa
=>0x1c0400002160: fa fa fd fa fa fa fd fa fa fa[01]fa fa fa fa fa
  0x1c0400002170: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400002180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c0400002190: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c04000021a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x1c04000021b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==6220==ABORTING
[1]    6220 abort      ./minishell
///////////////////////////////////////////////////////////////////////////////


