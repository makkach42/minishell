X $a split			
X minishell$> export f""=$a b=$a second mustnt be split   
X minishell$> export 1saa=$a f=$a b=$a split if str[0] 0-9
X $ara export 1=$a f=$a b=$a kolchi split
 $t u=$a split
 /*
 ----REDIRECTION (Command: ) (Ambiguous: 1) (Var: 0) (Fd_list: 0x7fee5a9041c0) (fd_list_redirs: "") [Redirections: > $z""]
 *******************1
 minishell$> > a$b
 >
 REDIRECTION
 
 a$b
 WORD
 
 
 
 ----REDIRECTION (Command: ) (Ambiguous: 0) (Var: 0) (Fd_list: 0x7fee5a804140) (fd_list_redirs: a    abc   ) (fd_list_redirs split: a) [Redirections: > a$b]
 *******************0
 
 
 //////ambiguous set after expantion
 */
 
 
 minishell$> > "$a"
 >
 REDIRECTION
 
 "$a"
 WORD
 
 
 
 ambiguous redirect
 ----REDIRECTION (Command: ) (Ambiguous: 1) (Var: 0) (Fd_list: 0x7fee5a804190) (fd_list_redirs: b  c) (fd_list_redirs split: b) [Redirections: > "$a"]
 *******************1
 
 not ambiguous
 export b=""
 ls > a$b
X minishell$> ls $a
X ls
X WORD
X 
X $a
X VARIABLE
X 
X 
X 
X ++++++++++++ls
X ++++++++++++b  c
X minishell$> export "h=$a"
X export
X COMMAND
X 
X "h=$a"
X WORD
X 
X 
X 
X ++++++++++++export
X ++++++++++++h=b  c"
X ----COMMAND (Command: export "h=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h=b  c") (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0)
X *******************0

X minishell$> "export h=$a"
X "export h=$a"
X WORD
X 
X 
X 
X ++++++++++++export h=b
X ++++++++++++c"
X ----WORD (Command: "export h=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export h=b) (Command_arr: c") (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0)
X *******************0
X minishell$> export 'h=$a'
X export
X COMMAND
X 
X 'h=$a'
X WORD
X 
X 
X 
X ++++++++++++export
X ++++++++++++h=b  c'
X ----COMMAND (Command: export 'h=$a' ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h=b  c') (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0)
X *******************0
X minishell$> export 'h=$a'
 minishell$> > $a
 >
 REDIRECTION
 
 $a
 VARIABLE
 
 
 
 ----REDIRECTION (Command: ) (Ambiguous: 0) (Var: 0) (Fd_list: 0x7fc59e204200) (fd_list_redirs: b  c) (fd_list_redirs split: b) [Redirections: > $a]
 *******************0
  ambiguous
 ///'"$a"'
 > '"$a"' a="l k j"
 > a$b ambiguous b="  abc  "
 > $c c=
//////////////////////
X  ➜  minishell git:(parser) ✗ export h="ayoub'aaa" hh='ayoub"sss'
X ➜  minishell git:(parser) ✗ ./minishell 
X minishell$>  j=$a ""n=$a "f=$a"
X j=$a
X WORD
X 
X ""n=$a
X WORD
X 
X "f=$a"
X WORD
X 
X 
X 
X ++++++++++++j=b  c
X ++++++++++++n=b
X ++++++++++++c
X ++++++++++++f=b  c
X ----WORD (Command: j=$a ""n=$a "f=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: j=b  c) (Command_arr: n=b) (Command_arr: c) (Command_arr: f=b  c) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0)
X *******************0
X minishell$>  j=$a """n=$a" "f=$a"
X j=$a
X WORD
X 
X """n=$a"
X WORD
X 
X "f=$a"
X WORD
X 
X [1]    21294 segmentation fault  ./minishell
X ////////////////////////////
X ////////////////////////////
X minishell$> export   j=$a ""'n=$a' "f=$a"
X export
X COMMAND
X 
X j=$a
X WORD
X 
X ""'n=$a'
X WORD
X 
X "f=$a"
X WORD
X 
X 
X 
X ++++++++++++export
X ++++++++++++j=b  c
X ++++++++++++n=b
X ++++++++++++c'
X ++++++++++++f=b  c
X ----COMMAND (Command: export j=$a ""'n=$a' "f=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: j=b  c) (Command_arr: n=b) (Command_arr: c') (Command_arr: f=b  c) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0) (Split idx: 4) (Split flg: 0)
X *******************0
X minishell$> export   j=$a ""'n=$a' "f=$a"
/////////////////////////////////// dont expand 'n=$a'
////////////
bash-3.2$ echo $
$
bash-3.2$ echo $"HOME"
HOME
bash-3.2$ echo $"HOME$"
HOME$
bash-3.2$ echo $"$'HOME$"
$'HOME$
bash-3.2$ echo $"$'HOME"
$'HOME
///////////////

 minishell$> > a$b
 b=
X echo "'$f'" expand
X echo '"'$g'"' remve quotes
X echo "'"$a"'" expand 
X echo $b'"as"' remove quotes
X "$l "-la dont split l=ls the same here ls'     '-la or ls"     "-la or ls"   a  "-la
X <<"'$b'" '$b' should stay
 ///////////////////////////////////////////////////////////////////////////////
X minishell$> export h=$a ""n=$a
X export
X COMMAND
X 
X h=$a
X WORD
X 
X ""n=$a
X WORD
X 
X ----COMMAND (Command: export h=$a ""n=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h) (Command_arr: =) (Command_arr: \$a) (Command_arr: n) (Command_arr: =) (Command_arr: \$a) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0) (Split idx: 4) (Split flg: 0) (Split idx: 5) (Split flg: 0) (Split idx: 6) (Split flg: 1)
X 
X 
X ++++++++++++export
X ++++++++++++h=b  c
X ++++++++++++n=b
X ++++++++++++c
X ----COMMAND (Command: export h=$a ""n=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h=b  c) (Command_arr: n=b) (Command_arr: c) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0)
X *******************0
X minishell$> export h=$a $n=$a
X export
X COMMAND
X 
X h=$a
X WORD
X 
X $n=$a
X VARIABLE
X 
X ----COMMAND (Command: export h=$a $n=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: h) (Command_arr: =) (Command_arr: \$a) (Command_arr: \$n) (Command_arr: =) (Command_arr: \$a) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0) (Split idx: 4) (Split flg: 1) (Split idx: 5) (Split flg: 0) (Split idx: 6) (Split flg: 1)
X =================================================================
X ==3851==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000184d1 at pc 0x000108392781 bp 0x7ffee7892250 sp 0x7ffee7892248
X READ of size 1 at 0x6020000184d1 thread T0
X     #0 0x108392780 in variable_expantion+0x4d0 (minishell:x86_64+0x100025780)
X     #1 0x108384660 in main+0x510 (minishell:x86_64+0x100017660)
X     #2 0x7fff67ddacc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
X 
X 0x6020000184d1 is located 0 bytes to the right of 1-byte region [0x6020000184d0,0x6020000184d1)
X allocated by thread T0 here:
X     #0 0x10846817d in wrap_malloc+0x9d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4917d)
X     #1 0x108386316 in cases+0xb6 (minishell:x86_64+0x100019316)
X     #2 0x108385eef in ft_strjoin+0x1f (minishell:x86_64+0x100018eef)
X     #3 0x108392181 in process_array_variable+0x631 (minishell:x86_64+0x100025181)
X     #4 0x108392e9d in variable_expantion+0xbed (minishell:x86_64+0x100025e9d)
X     #5 0x108384660 in main+0x510 (minishell:x86_64+0x100017660)
X     #6 0x7fff67ddacc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
X 
X SUMMARY: AddressSanitizer: heap-buffer-overflow (minishell:x86_64+0x100025780) in variable_expantion+0x4d0
X Shadow bytes around the buggy address:
X   0x1c0400003040: fa fa fd fa fa fa fd fa fa fa 03 fa fa fa 00 fa
X   0x1c0400003050: fa fa 00 fa fa fa 00 fa fa fa 00 fa fa fa 00 fa
X   0x1c0400003060: fa fa 00 fa fa fa 00 fa fa fa 07 fa fa fa 02 fa
X   0x1c0400003070: fa fa 02 fa fa fa 02 fa fa fa fd fa fa fa fd fa
X   0x1c0400003080: fa fa fd fa fa fa fd fa fa fa 05 fa fa fa fd fa
X =>0x1c0400003090: fa fa fd fa fa fa fd fa fa fa[01]fa fa fa fa fa
X   0x1c04000030a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X   0x1c04000030b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X   0x1c04000030c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X   0x1c04000030d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X   0x1c04000030e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X Shadow byte legend (one shadow byte represents 8 application bytes):
X   Addressable:           00
X   Partially addressable: 01 02 03 04 05 06 07 
X   Heap left redzone:       fa
X   Freed heap region:       fd
X   Stack left redzone:      f1
X   Stack mid redzone:       f2
X   Stack right redzone:     f3
X   Stack after return:      f5
X   Stack use after scope:   f8
X   Global redzone:          f9
X   Global init order:       f6
X   Poisoned by user:        f7
X   Container overflow:      fc
X   Array cookie:            ac
X   Intra object redzone:    bb
X   ASan internal:           fe
X   Left alloca redzone:     ca
X   Right alloca redzone:    cb
X   Shadow gap:              cc
X ==3851==ABORTING
X [1]    3851 abort      ./minishell
X ///////////////////////////////////////////////////////////////////////////////
X ///////////////////////////////////////////////////////////////////////////////
X minishell$> export j=$a $n=$a ''"f=$a"
X export
X COMMAND
X 
X j=$a
X WORD
X 
X $n=$a
X VARIABLE
X 
X ''"f=$a"
X WORD
X 
X ----COMMAND (Command: export j=$a $n=$a ''"f=$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: j) (Command_arr: =) (Command_arr: \$a) (Command_arr: \$n) (Command_arr: =) (Command_arr: \$a) (Command_arr: f=$a) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0) (Split idx: 4) (Split flg: 1) (Split idx: 5) (Split flg: 0) (Split idx: 6) (Split flg: 1) (Split idx: 7) (Split flg: 0)
X =================================================================
X ==6220==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000010b51 at pc 0x000102aaf781 bp 0x7ffeed175250 sp 0x7ffeed175248
X READ of size 1 at 0x602000010b51 thread T0
X     #0 0x102aaf780 in variable_expantion+0x4d0 (minishell:x86_64+0x100025780)
X     #1 0x102aa1660 in main+0x510 (minishell:x86_64+0x100017660)
X     #2 0x7fff67ddacc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
X 
X 0x602000010b51 is located 0 bytes to the right of 1-byte region [0x602000010b50,0x602000010b51)
X allocated by thread T0 here:
X     #0 0x1030ac17d in wrap_malloc+0x9d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x4917d)
X     #1 0x102aa3316 in cases+0xb6 (minishell:x86_64+0x100019316)
X     #2 0x102aa2eef in ft_strjoin+0x1f (minishell:x86_64+0x100018eef)
X     #3 0x102aaf181 in process_array_variable+0x631 (minishell:x86_64+0x100025181)
X     #4 0x102aafe9d in variable_expantion+0xbed (minishell:x86_64+0x100025e9d)
X     #5 0x102aa1660 in main+0x510 (minishell:x86_64+0x100017660)
X     #6 0x7fff67ddacc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)
X 
X SUMMARY: AddressSanitizer: heap-buffer-overflow (minishell:x86_64+0x100025780) in variable_expantion+0x4d0
X Shadow bytes around the buggy address:
X   0x1c0400002110: fa fa fd fd fa fa 00 fa fa fa 00 fa fa fa 00 fa
X   0x1c0400002120: fa fa 00 fa fa fa 00 fa fa fa 00 fa fa fa 00 fa
X   0x1c0400002130: fa fa 00 fa fa fa 07 fa fa fa 02 fa fa fa 02 fa
X   0x1c0400002140: fa fa 02 fa fa fa 05 fa fa fa fd fa fa fa fd fa
X   0x1c0400002150: fa fa fd fa fa fa fd fa fa fa 05 fa fa fa fd fa
X =>0x1c0400002160: fa fa fd fa fa fa fd fa fa fa[01]fa fa fa fa fa
X   0x1c0400002170: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X   0x1c0400002180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X   0x1c0400002190: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X   0x1c04000021a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X   0x1c04000021b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
X Shadow byte legend (one shadow byte represents 8 application bytes):
X   Addressable:           00
X   Partially addressable: 01 02 03 04 05 06 07 
X   Heap left redzone:       fa
X   Freed heap region:       fd
X   Stack left redzone:      f1
X   Stack mid redzone:       f2
X   Stack right redzone:     f3
X   Stack after return:      f5
X   Stack use after scope:   f8
X   Global redzone:          f9
X   Global init order:       f6
X   Poisoned by user:        f7
X   Container overflow:      fc
X   Array cookie:            ac
X   Intra object redzone:    bb
X   ASan internal:           fe
X   Left alloca redzone:     ca
X   Right alloca redzone:    cb
X   Shadow gap:              cc
X ==6220==ABORTING
X [1]    6220 abort      ./minishell
X ///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////
minishell$> "'""'$'a'""'"
"'""'$'a'""'"
WORD

bbbbbbb
///////////////////////////////////////////

echo '$a'$a $a should be expanded
X ///////////////////////////////////////////
X minishell$> "ls ' lalal"
X "ls '
X WORD
X 
X lalal"
X WORD
X 
X ----WORD (Command: "ls ' lalal" ) (Ambiguous: 0) (Var: 0) (Fd_list: 0) (Command_arr: ls ') (Command_arr: lalal) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0)
X *******************0
X minishell$> "ls ' lalal"
X ///////////////////////////////////////////
X minishell$> echo AYOUB"$HOME"k
X echo
X COMMAND
X 
X AYOUB"$HOME"k
X WORD
X 
X ----COMMAND (Command: echo AYOUB"$HOME"k ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: echo) (Command_arr: AYOUB) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0)
X *******************0
X ///////////////////////////////////////////
X minishell$> e'c'h"o "$a
X e'c'h"o "$a
X WORD
X 
X aaaaa
X bbbbbbb
X ----WORD (Command: e'c'h"o "$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: echo) (Command_arr: b) (Command_arr: c) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0)
X *******************0
X ///////////////////////////////////////////
X minishell$> ls"$o"$a
X ls"$o"$a
X WORD
X 
X aaaaa
X bbbbbbb
X ----WORD (Command: ls"$o"$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: ls) (Command_arr: b) (Command_arr: c) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0)
X *******************0
X ///////////////////////////////////////////
X minishell$> echo $b"a"
X echo
X COMMAND
X 
X $b"a"
X VARIABLE
X 
X ----COMMAND (Command: echo $b"a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: echo) (Command_arr: ) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0)
X *******************0
X /////////////////////////////////////////// variable name extraction
X ///////////////////////////////////////////
X minishell$> "export" $a="$a c$a"
X "export"
X WORD
X 
X $a="$a
X VARIABLE
X 
X c$a"
X WORD
X 
X aaaaa
X aaaaa
X aaaaa
X aaaaa
X ccccccc
X ----WORD (Command: "export" $a="$a c$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: b) (Command_arr: c=b  c) (Command_arr: cb) (Command_arr: c) (Split idx: 0) (Split flg: 0) (Split idx: 1) (Split flg: 0) (Split idx: 2) (Split flg: 0) (Split idx: 3) (Split flg: 0) (Split idx: 4) (Split flg: 0)
X *******************0
X ///////////////////////////////////////////
///////////////////////////////////////////


///////////////////////////////////////////
minishell$> """$1HOME"""
"""$1HOME"""
WORD

----WORD (Command: """$1HOME""" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: )
///////////////////////////////////////////
///////////////////////////////////////////
minishell$> "'$f'"
"'$f'"
WORD

----WORD (Command: "'$f'" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: 'ayohm")
///////////////////////////////////////////
///////////////////////////////////////////
➜  minishell git:(parser) ✗ echo $g
ayp"hm
➜  minishell git:(parser) ✗ ./minishell
minishell$> $g
$g
VARIABLE

----VARIABLE (Command: $g ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: ayphm)
///////////////////////////////////////////
///////////////////////////////////////////
minishell$> export a=$a "b=""$a" c=$a
export
COMMAND

a=$a
WORD

"b=""$a" c=$a ///
WORD

----COMMAND (Command: export a=$a "b=""$a" c=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: a=B  C) (Command_arr: b=B  Cc=B  C)
*******************0
minishell$> 
///////////////////////////////////////////
///////////////////////////////////////////
minishell$> export "b="$a
export
COMMAND

"b="$a
WORD

----COMMAND (Command: export "b="$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: b=B  C)
/////////////////////////////////////////// split
///////////////////////////////////////////
minishell$> export $j=$a
export
COMMAND

$j=     /////////////
VARIABLE

$a
VARIABLE

X ----COMMAND (Command: export $j= $a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: =) (Command_arr: B) (Command_arr: C)
X ///////////////////////////////////////////
X ///////////////////////////////////////////
X minishell$> ""export j=$a
X ""export j=$a
X WORD
X 
X ----WORD (Command: ""export j=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export j=B  C)
X /////////////////////////////////////////// split
X ///////////////////////////////////////////
X echo $$$$$$a infinit loop
X ///////////////////////////////////////////
X ///////////////////////////////////////////
X minishell$> ls $USER$USER$USER
X ls
X WORD
X 
X $USER
X VARIABLE
X 
X $USER
X VARIABLE
X 
X $USER
X VARIABLE
X 
X ----WORD (Command: ls $USER $USER $USER ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: ls) (Command_arr: $USER) (Command_arr: $USER) (Command_arr: $USER)
X ----WORD (Command: ls $USER $USER $USER ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: ls) (Command_arr: makkach) (Command_arr: makkach) (Command_arr: makkach)
X ----WORD (Command: ls $USER $USER $USER ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: ls) (Command_arr: makkach) (Command_arr: makkach) (Command_arr: makkach)
X ///////////////////////////////////////////
X ///////////////////////////////////////////
X minishell$> export l*+=$a
X export
X COMMAND
X 
X l*+=$a
X WORD
X 
X ----COMMAND (Command: export l*+=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: l*+="$a")
X ----COMMAND (Command: export l*+=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: l*+=b  c)
X ----COMMAND (Command: export l*+=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: l*+=b  c)
X *******************0
X minishell$> 
X /////////////////////////////////////////// split
X ///////////////////////////////////////////
X minishell$> export ay1hg=$a
X export
X COMMAND
X 
X ay1hg=$a
X WORD
X 
X ----COMMAND (Command: export ay1hg=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: ay1hg=$a)
X ----COMMAND (Command: export ay1hg=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: ay1hg=b) (Command_arr: c)
X ----COMMAND (Command: export ay1hg=$a ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: ay1hg=b) (Command_arr: c)
X *******************0
X minishell$> export ay1=$a
X /////////////////////////////////////////// spli only if str[0] = 0-9
X ///////////////////////////////////////////
X minishell$> export ay="$a""$a"
X export
X COMMAND
X 
X ay="$a""$a"
X WORD
X 
X ----COMMAND (Command: export ay="$a""$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: ay="$a""$a")
X ----COMMAND (Command: export ay="$a""$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: ay="$a"""$a"")
X ----COMMAND (Command: export ay="$a""$a" ) (Ambiguous: 0) (Var: 1) (Fd_list: 0) (Command_arr: export) (Command_arr: ay=b  cb) (Command_arr: c)
X ///////////////////////////////////////////skip if already in double quotes
///////////////////////////////////////////

///////////////////////////////////////////